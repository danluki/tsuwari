// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AddEmoteToSetEmoteSetsEmoteSetMutation includes the requested fields of the GraphQL type EmoteSetMutation.
type AddEmoteToSetEmoteSetsEmoteSetMutation struct {
	EmoteSet AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation `json:"emoteSet"`
}

// GetEmoteSet returns AddEmoteToSetEmoteSetsEmoteSetMutation.EmoteSet, and is useful for accessing the field via an interface.
func (v *AddEmoteToSetEmoteSetsEmoteSetMutation) GetEmoteSet() AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation {
	return v.EmoteSet
}

// AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation includes the requested fields of the GraphQL type EmoteSetOperation.
type AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation struct {
	AddEmote AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet `json:"addEmote"`
}

// GetAddEmote returns AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation.AddEmote, and is useful for accessing the field via an interface.
func (v *AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation) GetAddEmote() AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet {
	return v.AddEmote
}

// AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet includes the requested fields of the GraphQL type EmoteSet.
type AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet.Id, and is useful for accessing the field via an interface.
func (v *AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet) GetId() string {
	return v.Id
}

// GetName returns AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet.Name, and is useful for accessing the field via an interface.
func (v *AddEmoteToSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationAddEmoteEmoteSet) GetName() string {
	return v.Name
}

// AddEmoteToSetResponse is returned by AddEmoteToSet on success.
type AddEmoteToSetResponse struct {
	EmoteSets AddEmoteToSetEmoteSetsEmoteSetMutation `json:"emoteSets"`
}

// GetEmoteSets returns AddEmoteToSetResponse.EmoteSets, and is useful for accessing the field via an interface.
func (v *AddEmoteToSetResponse) GetEmoteSets() AddEmoteToSetEmoteSetsEmoteSetMutation {
	return v.EmoteSets
}

// DeleteEmoteFromSetEmoteSetsEmoteSetMutation includes the requested fields of the GraphQL type EmoteSetMutation.
type DeleteEmoteFromSetEmoteSetsEmoteSetMutation struct {
	EmoteSet DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation `json:"emoteSet"`
}

// GetEmoteSet returns DeleteEmoteFromSetEmoteSetsEmoteSetMutation.EmoteSet, and is useful for accessing the field via an interface.
func (v *DeleteEmoteFromSetEmoteSetsEmoteSetMutation) GetEmoteSet() DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation {
	return v.EmoteSet
}

// DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation includes the requested fields of the GraphQL type EmoteSetOperation.
type DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation struct {
	RemoveEmote DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet `json:"removeEmote"`
}

// GetRemoveEmote returns DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation.RemoveEmote, and is useful for accessing the field via an interface.
func (v *DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation) GetRemoveEmote() DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet {
	return v.RemoveEmote
}

// DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet includes the requested fields of the GraphQL type EmoteSet.
type DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet.Id, and is useful for accessing the field via an interface.
func (v *DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet) GetId() string {
	return v.Id
}

// GetName returns DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet.Name, and is useful for accessing the field via an interface.
func (v *DeleteEmoteFromSetEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationRemoveEmoteEmoteSet) GetName() string {
	return v.Name
}

// DeleteEmoteFromSetResponse is returned by DeleteEmoteFromSet on success.
type DeleteEmoteFromSetResponse struct {
	EmoteSets DeleteEmoteFromSetEmoteSetsEmoteSetMutation `json:"emoteSets"`
}

// GetEmoteSets returns DeleteEmoteFromSetResponse.EmoteSets, and is useful for accessing the field via an interface.
func (v *DeleteEmoteFromSetResponse) GetEmoteSets() DeleteEmoteFromSetEmoteSetsEmoteSetMutation {
	return v.EmoteSets
}

type EmoteSetEmoteId struct {
	EmoteId string  `json:"emoteId"`
	Alias   *string `json:"alias"`
}

// GetEmoteId returns EmoteSetEmoteId.EmoteId, and is useful for accessing the field via an interface.
func (v *EmoteSetEmoteId) GetEmoteId() string { return v.EmoteId }

// GetAlias returns EmoteSetEmoteId.Alias, and is useful for accessing the field via an interface.
func (v *EmoteSetEmoteId) GetAlias() *string { return v.Alias }

type EmoteSetKind string

const (
	EmoteSetKindNormal   EmoteSetKind = "NORMAL"
	EmoteSetKindPersonal EmoteSetKind = "PERSONAL"
	EmoteSetKindGlobal   EmoteSetKind = "GLOBAL"
	EmoteSetKindSpecial  EmoteSetKind = "SPECIAL"
)

var AllEmoteSetKind = []EmoteSetKind{
	EmoteSetKindNormal,
	EmoteSetKindPersonal,
	EmoteSetKindGlobal,
	EmoteSetKindSpecial,
}

// GetOneEmoteByIdEmotesEmoteQuery includes the requested fields of the GraphQL type EmoteQuery.
type GetOneEmoteByIdEmotesEmoteQuery struct {
	Emote *GetOneEmoteByIdEmotesEmoteQueryEmote `json:"emote"`
}

// GetEmote returns GetOneEmoteByIdEmotesEmoteQuery.Emote, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdEmotesEmoteQuery) GetEmote() *GetOneEmoteByIdEmotesEmoteQueryEmote {
	return v.Emote
}

// GetOneEmoteByIdEmotesEmoteQueryEmote includes the requested fields of the GraphQL type Emote.
type GetOneEmoteByIdEmotesEmoteQueryEmote struct {
	TwirSeventvEmote `json:"-"`
}

// GetId returns GetOneEmoteByIdEmotesEmoteQueryEmote.Id, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) GetId() string { return v.TwirSeventvEmote.Id }

// GetDefaultName returns GetOneEmoteByIdEmotesEmoteQueryEmote.DefaultName, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) GetDefaultName() string {
	return v.TwirSeventvEmote.DefaultName
}

// GetImages returns GetOneEmoteByIdEmotesEmoteQueryEmote.Images, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) GetImages() []TwirSeventvEmoteImagesImage {
	return v.TwirSeventvEmote.Images
}

// GetOwnerId returns GetOneEmoteByIdEmotesEmoteQueryEmote.OwnerId, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) GetOwnerId() string { return v.TwirSeventvEmote.OwnerId }

// GetOwner returns GetOneEmoteByIdEmotesEmoteQueryEmote.Owner, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) GetOwner() *TwirSeventvEmoteOwnerUser {
	return v.TwirSeventvEmote.Owner
}

func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetOneEmoteByIdEmotesEmoteQueryEmote
		graphql.NoUnmarshalJSON
	}
	firstPass.GetOneEmoteByIdEmotesEmoteQueryEmote = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TwirSeventvEmote)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetOneEmoteByIdEmotesEmoteQueryEmote struct {
	Id string `json:"id"`

	DefaultName string `json:"defaultName"`

	Images []TwirSeventvEmoteImagesImage `json:"images"`

	OwnerId string `json:"ownerId"`

	Owner *TwirSeventvEmoteOwnerUser `json:"owner"`
}

func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetOneEmoteByIdEmotesEmoteQueryEmote) __premarshalJSON() (*__premarshalGetOneEmoteByIdEmotesEmoteQueryEmote, error) {
	var retval __premarshalGetOneEmoteByIdEmotesEmoteQueryEmote

	retval.Id = v.TwirSeventvEmote.Id
	retval.DefaultName = v.TwirSeventvEmote.DefaultName
	retval.Images = v.TwirSeventvEmote.Images
	retval.OwnerId = v.TwirSeventvEmote.OwnerId
	retval.Owner = v.TwirSeventvEmote.Owner
	return &retval, nil
}

// GetOneEmoteByIdResponse is returned by GetOneEmoteById on success.
type GetOneEmoteByIdResponse struct {
	Emotes GetOneEmoteByIdEmotesEmoteQuery `json:"emotes"`
}

// GetEmotes returns GetOneEmoteByIdResponse.Emotes, and is useful for accessing the field via an interface.
func (v *GetOneEmoteByIdResponse) GetEmotes() GetOneEmoteByIdEmotesEmoteQuery { return v.Emotes }

// GetProfileByIdResponse is returned by GetProfileById on success.
type GetProfileByIdResponse struct {
	Users GetProfileByIdUsersUserQuery `json:"users"`
}

// GetUsers returns GetProfileByIdResponse.Users, and is useful for accessing the field via an interface.
func (v *GetProfileByIdResponse) GetUsers() GetProfileByIdUsersUserQuery { return v.Users }

// GetProfileByIdUsersUserQuery includes the requested fields of the GraphQL type UserQuery.
type GetProfileByIdUsersUserQuery struct {
	User *GetProfileByIdUsersUserQueryUser `json:"user"`
}

// GetUser returns GetProfileByIdUsersUserQuery.User, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQuery) GetUser() *GetProfileByIdUsersUserQueryUser { return v.User }

// GetProfileByIdUsersUserQueryUser includes the requested fields of the GraphQL type User.
type GetProfileByIdUsersUserQueryUser struct {
	TwirSeventvUser `json:"-"`
}

// GetId returns GetProfileByIdUsersUserQueryUser.Id, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetId() string { return v.TwirSeventvUser.Id }

// GetMainConnection returns GetProfileByIdUsersUserQueryUser.MainConnection, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetMainConnection() *TwirSeventvUserMainConnectionUserConnection {
	return v.TwirSeventvUser.MainConnection
}

// GetUpdatedAt returns GetProfileByIdUsersUserQueryUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetUpdatedAt() time.Time {
	return v.TwirSeventvUser.UpdatedAt
}

// GetEditors returns GetProfileByIdUsersUserQueryUser.Editors, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetEditors() []TwirSeventvUserEditorsUserEditor {
	return v.TwirSeventvUser.Editors
}

// GetEditorFor returns GetProfileByIdUsersUserQueryUser.EditorFor, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetEditorFor() []TwirSeventvUserEditorForUserEditor {
	return v.TwirSeventvUser.EditorFor
}

// GetEmoteSets returns GetProfileByIdUsersUserQueryUser.EmoteSets, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetEmoteSets() []TwirSeventvUserEmoteSetsEmoteSet {
	return v.TwirSeventvUser.EmoteSets
}

// GetRoles returns GetProfileByIdUsersUserQueryUser.Roles, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetRoles() []TwirSeventvUserRolesRole {
	return v.TwirSeventvUser.Roles
}

// GetStyle returns GetProfileByIdUsersUserQueryUser.Style, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetStyle() TwirSeventvUserStyle {
	return v.TwirSeventvUser.Style
}

// GetInventory returns GetProfileByIdUsersUserQueryUser.Inventory, and is useful for accessing the field via an interface.
func (v *GetProfileByIdUsersUserQueryUser) GetInventory() TwirSeventvUserInventory {
	return v.TwirSeventvUser.Inventory
}

func (v *GetProfileByIdUsersUserQueryUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetProfileByIdUsersUserQueryUser
		graphql.NoUnmarshalJSON
	}
	firstPass.GetProfileByIdUsersUserQueryUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TwirSeventvUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetProfileByIdUsersUserQueryUser struct {
	Id string `json:"id"`

	MainConnection *TwirSeventvUserMainConnectionUserConnection `json:"mainConnection"`

	UpdatedAt time.Time `json:"updatedAt"`

	Editors []TwirSeventvUserEditorsUserEditor `json:"editors"`

	EditorFor []TwirSeventvUserEditorForUserEditor `json:"editorFor"`

	EmoteSets []TwirSeventvUserEmoteSetsEmoteSet `json:"emoteSets"`

	Roles []TwirSeventvUserRolesRole `json:"roles"`

	Style TwirSeventvUserStyle `json:"style"`

	Inventory TwirSeventvUserInventory `json:"inventory"`
}

func (v *GetProfileByIdUsersUserQueryUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetProfileByIdUsersUserQueryUser) __premarshalJSON() (*__premarshalGetProfileByIdUsersUserQueryUser, error) {
	var retval __premarshalGetProfileByIdUsersUserQueryUser

	retval.Id = v.TwirSeventvUser.Id
	retval.MainConnection = v.TwirSeventvUser.MainConnection
	retval.UpdatedAt = v.TwirSeventvUser.UpdatedAt
	retval.Editors = v.TwirSeventvUser.Editors
	retval.EditorFor = v.TwirSeventvUser.EditorFor
	retval.EmoteSets = v.TwirSeventvUser.EmoteSets
	retval.Roles = v.TwirSeventvUser.Roles
	retval.Style = v.TwirSeventvUser.Style
	retval.Inventory = v.TwirSeventvUser.Inventory
	return &retval, nil
}

// GetProfileByTwitchIdResponse is returned by GetProfileByTwitchId on success.
type GetProfileByTwitchIdResponse struct {
	Users GetProfileByTwitchIdUsersUserQuery `json:"users"`
}

// GetUsers returns GetProfileByTwitchIdResponse.Users, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdResponse) GetUsers() GetProfileByTwitchIdUsersUserQuery { return v.Users }

// GetProfileByTwitchIdUsersUserQuery includes the requested fields of the GraphQL type UserQuery.
type GetProfileByTwitchIdUsersUserQuery struct {
	UserByConnection *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser `json:"userByConnection"`
}

// GetUserByConnection returns GetProfileByTwitchIdUsersUserQuery.UserByConnection, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQuery) GetUserByConnection() *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser {
	return v.UserByConnection
}

// GetProfileByTwitchIdUsersUserQueryUserByConnectionUser includes the requested fields of the GraphQL type User.
type GetProfileByTwitchIdUsersUserQueryUserByConnectionUser struct {
	TwirSeventvUser `json:"-"`
}

// GetId returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.Id, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetId() string {
	return v.TwirSeventvUser.Id
}

// GetMainConnection returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.MainConnection, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetMainConnection() *TwirSeventvUserMainConnectionUserConnection {
	return v.TwirSeventvUser.MainConnection
}

// GetUpdatedAt returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetUpdatedAt() time.Time {
	return v.TwirSeventvUser.UpdatedAt
}

// GetEditors returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.Editors, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetEditors() []TwirSeventvUserEditorsUserEditor {
	return v.TwirSeventvUser.Editors
}

// GetEditorFor returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.EditorFor, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetEditorFor() []TwirSeventvUserEditorForUserEditor {
	return v.TwirSeventvUser.EditorFor
}

// GetEmoteSets returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.EmoteSets, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetEmoteSets() []TwirSeventvUserEmoteSetsEmoteSet {
	return v.TwirSeventvUser.EmoteSets
}

// GetRoles returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.Roles, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetRoles() []TwirSeventvUserRolesRole {
	return v.TwirSeventvUser.Roles
}

// GetStyle returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.Style, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetStyle() TwirSeventvUserStyle {
	return v.TwirSeventvUser.Style
}

// GetInventory returns GetProfileByTwitchIdUsersUserQueryUserByConnectionUser.Inventory, and is useful for accessing the field via an interface.
func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) GetInventory() TwirSeventvUserInventory {
	return v.TwirSeventvUser.Inventory
}

func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetProfileByTwitchIdUsersUserQueryUserByConnectionUser
		graphql.NoUnmarshalJSON
	}
	firstPass.GetProfileByTwitchIdUsersUserQueryUserByConnectionUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TwirSeventvUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetProfileByTwitchIdUsersUserQueryUserByConnectionUser struct {
	Id string `json:"id"`

	MainConnection *TwirSeventvUserMainConnectionUserConnection `json:"mainConnection"`

	UpdatedAt time.Time `json:"updatedAt"`

	Editors []TwirSeventvUserEditorsUserEditor `json:"editors"`

	EditorFor []TwirSeventvUserEditorForUserEditor `json:"editorFor"`

	EmoteSets []TwirSeventvUserEmoteSetsEmoteSet `json:"emoteSets"`

	Roles []TwirSeventvUserRolesRole `json:"roles"`

	Style TwirSeventvUserStyle `json:"style"`

	Inventory TwirSeventvUserInventory `json:"inventory"`
}

func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetProfileByTwitchIdUsersUserQueryUserByConnectionUser) __premarshalJSON() (*__premarshalGetProfileByTwitchIdUsersUserQueryUserByConnectionUser, error) {
	var retval __premarshalGetProfileByTwitchIdUsersUserQueryUserByConnectionUser

	retval.Id = v.TwirSeventvUser.Id
	retval.MainConnection = v.TwirSeventvUser.MainConnection
	retval.UpdatedAt = v.TwirSeventvUser.UpdatedAt
	retval.Editors = v.TwirSeventvUser.Editors
	retval.EditorFor = v.TwirSeventvUser.EditorFor
	retval.EmoteSets = v.TwirSeventvUser.EmoteSets
	retval.Roles = v.TwirSeventvUser.Roles
	retval.Style = v.TwirSeventvUser.Style
	retval.Inventory = v.TwirSeventvUser.Inventory
	return &retval, nil
}

type Platform string

const (
	PlatformTwitch  Platform = "TWITCH"
	PlatformDiscord Platform = "DISCORD"
	PlatformGoogle  Platform = "GOOGLE"
	PlatformKick    Platform = "KICK"
)

var AllPlatform = []Platform{
	PlatformTwitch,
	PlatformDiscord,
	PlatformGoogle,
	PlatformKick,
}

// RenameEmoteEmoteSetsEmoteSetMutation includes the requested fields of the GraphQL type EmoteSetMutation.
type RenameEmoteEmoteSetsEmoteSetMutation struct {
	EmoteSet RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation `json:"emoteSet"`
}

// GetEmoteSet returns RenameEmoteEmoteSetsEmoteSetMutation.EmoteSet, and is useful for accessing the field via an interface.
func (v *RenameEmoteEmoteSetsEmoteSetMutation) GetEmoteSet() RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation {
	return v.EmoteSet
}

// RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation includes the requested fields of the GraphQL type EmoteSetOperation.
type RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation struct {
	UpdateEmoteAlias RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationUpdateEmoteAliasEmoteSetEmote `json:"updateEmoteAlias"`
}

// GetUpdateEmoteAlias returns RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation.UpdateEmoteAlias, and is useful for accessing the field via an interface.
func (v *RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperation) GetUpdateEmoteAlias() RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationUpdateEmoteAliasEmoteSetEmote {
	return v.UpdateEmoteAlias
}

// RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationUpdateEmoteAliasEmoteSetEmote includes the requested fields of the GraphQL type EmoteSetEmote.
type RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationUpdateEmoteAliasEmoteSetEmote struct {
	Id string `json:"id"`
}

// GetId returns RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationUpdateEmoteAliasEmoteSetEmote.Id, and is useful for accessing the field via an interface.
func (v *RenameEmoteEmoteSetsEmoteSetMutationEmoteSetEmoteSetOperationUpdateEmoteAliasEmoteSetEmote) GetId() string {
	return v.Id
}

// RenameEmoteResponse is returned by RenameEmote on success.
type RenameEmoteResponse struct {
	EmoteSets RenameEmoteEmoteSetsEmoteSetMutation `json:"emoteSets"`
}

// GetEmoteSets returns RenameEmoteResponse.EmoteSets, and is useful for accessing the field via an interface.
func (v *RenameEmoteResponse) GetEmoteSets() RenameEmoteEmoteSetsEmoteSetMutation { return v.EmoteSets }

// SearchEmoteByNameEmotesEmoteQuery includes the requested fields of the GraphQL type EmoteQuery.
type SearchEmoteByNameEmotesEmoteQuery struct {
	Search SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResult `json:"search"`
}

// GetSearch returns SearchEmoteByNameEmotesEmoteQuery.Search, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuery) GetSearch() SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResult {
	return v.Search
}

// SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResult includes the requested fields of the GraphQL type EmoteSearchResult.
type SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResult struct {
	Items []SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote `json:"items"`
}

// GetItems returns SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResult.Items, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResult) GetItems() []SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote {
	return v.Items
}

// SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote includes the requested fields of the GraphQL type Emote.
type SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote struct {
	TwirSeventvEmote `json:"-"`
}

// GetId returns SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote.Id, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) GetId() string {
	return v.TwirSeventvEmote.Id
}

// GetDefaultName returns SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote.DefaultName, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) GetDefaultName() string {
	return v.TwirSeventvEmote.DefaultName
}

// GetImages returns SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote.Images, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) GetImages() []TwirSeventvEmoteImagesImage {
	return v.TwirSeventvEmote.Images
}

// GetOwnerId returns SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote.OwnerId, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) GetOwnerId() string {
	return v.TwirSeventvEmote.OwnerId
}

// GetOwner returns SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote.Owner, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) GetOwner() *TwirSeventvEmoteOwnerUser {
	return v.TwirSeventvEmote.Owner
}

func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote
		graphql.NoUnmarshalJSON
	}
	firstPass.SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TwirSeventvEmote)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote struct {
	Id string `json:"id"`

	DefaultName string `json:"defaultName"`

	Images []TwirSeventvEmoteImagesImage `json:"images"`

	OwnerId string `json:"ownerId"`

	Owner *TwirSeventvEmoteOwnerUser `json:"owner"`
}

func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote) __premarshalJSON() (*__premarshalSearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote, error) {
	var retval __premarshalSearchEmoteByNameEmotesEmoteQuerySearchEmoteSearchResultItemsEmote

	retval.Id = v.TwirSeventvEmote.Id
	retval.DefaultName = v.TwirSeventvEmote.DefaultName
	retval.Images = v.TwirSeventvEmote.Images
	retval.OwnerId = v.TwirSeventvEmote.OwnerId
	retval.Owner = v.TwirSeventvEmote.Owner
	return &retval, nil
}

// SearchEmoteByNameResponse is returned by SearchEmoteByName on success.
type SearchEmoteByNameResponse struct {
	Emotes SearchEmoteByNameEmotesEmoteQuery `json:"emotes"`
}

// GetEmotes returns SearchEmoteByNameResponse.Emotes, and is useful for accessing the field via an interface.
func (v *SearchEmoteByNameResponse) GetEmotes() SearchEmoteByNameEmotesEmoteQuery { return v.Emotes }

// TwirSeventvEmote includes the GraphQL fields of Emote requested by the fragment TwirSeventvEmote.
type TwirSeventvEmote struct {
	Id          string                        `json:"id"`
	DefaultName string                        `json:"defaultName"`
	Images      []TwirSeventvEmoteImagesImage `json:"images"`
	OwnerId     string                        `json:"ownerId"`
	Owner       *TwirSeventvEmoteOwnerUser    `json:"owner"`
}

// GetId returns TwirSeventvEmote.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmote) GetId() string { return v.Id }

// GetDefaultName returns TwirSeventvEmote.DefaultName, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmote) GetDefaultName() string { return v.DefaultName }

// GetImages returns TwirSeventvEmote.Images, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmote) GetImages() []TwirSeventvEmoteImagesImage { return v.Images }

// GetOwnerId returns TwirSeventvEmote.OwnerId, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmote) GetOwnerId() string { return v.OwnerId }

// GetOwner returns TwirSeventvEmote.Owner, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmote) GetOwner() *TwirSeventvEmoteOwnerUser { return v.Owner }

// TwirSeventvEmoteImagesImage includes the requested fields of the GraphQL type Image.
type TwirSeventvEmoteImagesImage struct {
	Size   int    `json:"size"`
	Width  int    `json:"width"`
	Height int    `json:"height"`
	Mime   string `json:"mime"`
	Url    string `json:"url"`
}

// GetSize returns TwirSeventvEmoteImagesImage.Size, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteImagesImage) GetSize() int { return v.Size }

// GetWidth returns TwirSeventvEmoteImagesImage.Width, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteImagesImage) GetWidth() int { return v.Width }

// GetHeight returns TwirSeventvEmoteImagesImage.Height, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteImagesImage) GetHeight() int { return v.Height }

// GetMime returns TwirSeventvEmoteImagesImage.Mime, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteImagesImage) GetMime() string { return v.Mime }

// GetUrl returns TwirSeventvEmoteImagesImage.Url, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteImagesImage) GetUrl() string { return v.Url }

// TwirSeventvEmoteOwnerUser includes the requested fields of the GraphQL type User.
type TwirSeventvEmoteOwnerUser struct {
	TwirSeventvUser `json:"-"`
}

// GetId returns TwirSeventvEmoteOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetId() string { return v.TwirSeventvUser.Id }

// GetMainConnection returns TwirSeventvEmoteOwnerUser.MainConnection, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetMainConnection() *TwirSeventvUserMainConnectionUserConnection {
	return v.TwirSeventvUser.MainConnection
}

// GetUpdatedAt returns TwirSeventvEmoteOwnerUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetUpdatedAt() time.Time { return v.TwirSeventvUser.UpdatedAt }

// GetEditors returns TwirSeventvEmoteOwnerUser.Editors, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetEditors() []TwirSeventvUserEditorsUserEditor {
	return v.TwirSeventvUser.Editors
}

// GetEditorFor returns TwirSeventvEmoteOwnerUser.EditorFor, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetEditorFor() []TwirSeventvUserEditorForUserEditor {
	return v.TwirSeventvUser.EditorFor
}

// GetEmoteSets returns TwirSeventvEmoteOwnerUser.EmoteSets, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetEmoteSets() []TwirSeventvUserEmoteSetsEmoteSet {
	return v.TwirSeventvUser.EmoteSets
}

// GetRoles returns TwirSeventvEmoteOwnerUser.Roles, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetRoles() []TwirSeventvUserRolesRole {
	return v.TwirSeventvUser.Roles
}

// GetStyle returns TwirSeventvEmoteOwnerUser.Style, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetStyle() TwirSeventvUserStyle { return v.TwirSeventvUser.Style }

// GetInventory returns TwirSeventvEmoteOwnerUser.Inventory, and is useful for accessing the field via an interface.
func (v *TwirSeventvEmoteOwnerUser) GetInventory() TwirSeventvUserInventory {
	return v.TwirSeventvUser.Inventory
}

func (v *TwirSeventvEmoteOwnerUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TwirSeventvEmoteOwnerUser
		graphql.NoUnmarshalJSON
	}
	firstPass.TwirSeventvEmoteOwnerUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TwirSeventvUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTwirSeventvEmoteOwnerUser struct {
	Id string `json:"id"`

	MainConnection *TwirSeventvUserMainConnectionUserConnection `json:"mainConnection"`

	UpdatedAt time.Time `json:"updatedAt"`

	Editors []TwirSeventvUserEditorsUserEditor `json:"editors"`

	EditorFor []TwirSeventvUserEditorForUserEditor `json:"editorFor"`

	EmoteSets []TwirSeventvUserEmoteSetsEmoteSet `json:"emoteSets"`

	Roles []TwirSeventvUserRolesRole `json:"roles"`

	Style TwirSeventvUserStyle `json:"style"`

	Inventory TwirSeventvUserInventory `json:"inventory"`
}

func (v *TwirSeventvEmoteOwnerUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TwirSeventvEmoteOwnerUser) __premarshalJSON() (*__premarshalTwirSeventvEmoteOwnerUser, error) {
	var retval __premarshalTwirSeventvEmoteOwnerUser

	retval.Id = v.TwirSeventvUser.Id
	retval.MainConnection = v.TwirSeventvUser.MainConnection
	retval.UpdatedAt = v.TwirSeventvUser.UpdatedAt
	retval.Editors = v.TwirSeventvUser.Editors
	retval.EditorFor = v.TwirSeventvUser.EditorFor
	retval.EmoteSets = v.TwirSeventvUser.EmoteSets
	retval.Roles = v.TwirSeventvUser.Roles
	retval.Style = v.TwirSeventvUser.Style
	retval.Inventory = v.TwirSeventvUser.Inventory
	return &retval, nil
}

// TwirSeventvUser includes the GraphQL fields of User requested by the fragment TwirSeventvUser.
type TwirSeventvUser struct {
	Id             string                                       `json:"id"`
	MainConnection *TwirSeventvUserMainConnectionUserConnection `json:"mainConnection"`
	UpdatedAt      time.Time                                    `json:"updatedAt"`
	Editors        []TwirSeventvUserEditorsUserEditor           `json:"editors"`
	EditorFor      []TwirSeventvUserEditorForUserEditor         `json:"editorFor"`
	EmoteSets      []TwirSeventvUserEmoteSetsEmoteSet           `json:"emoteSets"`
	Roles          []TwirSeventvUserRolesRole                   `json:"roles"`
	Style          TwirSeventvUserStyle                         `json:"style"`
	Inventory      TwirSeventvUserInventory                     `json:"inventory"`
}

// GetId returns TwirSeventvUser.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetId() string { return v.Id }

// GetMainConnection returns TwirSeventvUser.MainConnection, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetMainConnection() *TwirSeventvUserMainConnectionUserConnection {
	return v.MainConnection
}

// GetUpdatedAt returns TwirSeventvUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetEditors returns TwirSeventvUser.Editors, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetEditors() []TwirSeventvUserEditorsUserEditor { return v.Editors }

// GetEditorFor returns TwirSeventvUser.EditorFor, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetEditorFor() []TwirSeventvUserEditorForUserEditor { return v.EditorFor }

// GetEmoteSets returns TwirSeventvUser.EmoteSets, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetEmoteSets() []TwirSeventvUserEmoteSetsEmoteSet { return v.EmoteSets }

// GetRoles returns TwirSeventvUser.Roles, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetRoles() []TwirSeventvUserRolesRole { return v.Roles }

// GetStyle returns TwirSeventvUser.Style, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetStyle() TwirSeventvUserStyle { return v.Style }

// GetInventory returns TwirSeventvUser.Inventory, and is useful for accessing the field via an interface.
func (v *TwirSeventvUser) GetInventory() TwirSeventvUserInventory { return v.Inventory }

// TwirSeventvUserEditorForUserEditor includes the requested fields of the GraphQL type UserEditor.
type TwirSeventvUserEditorForUserEditor struct {
	AddedById   string                                        `json:"addedById"`
	UserId      string                                        `json:"userId"`
	EditorId    string                                        `json:"editorId"`
	AddedAt     time.Time                                     `json:"addedAt"`
	Permissions TwirSeventvUserEditorForUserEditorPermissions `json:"permissions"`
}

// GetAddedById returns TwirSeventvUserEditorForUserEditor.AddedById, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditor) GetAddedById() string { return v.AddedById }

// GetUserId returns TwirSeventvUserEditorForUserEditor.UserId, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditor) GetUserId() string { return v.UserId }

// GetEditorId returns TwirSeventvUserEditorForUserEditor.EditorId, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditor) GetEditorId() string { return v.EditorId }

// GetAddedAt returns TwirSeventvUserEditorForUserEditor.AddedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditor) GetAddedAt() time.Time { return v.AddedAt }

// GetPermissions returns TwirSeventvUserEditorForUserEditor.Permissions, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditor) GetPermissions() TwirSeventvUserEditorForUserEditorPermissions {
	return v.Permissions
}

// TwirSeventvUserEditorForUserEditorPermissions includes the requested fields of the GraphQL type UserEditorPermissions.
type TwirSeventvUserEditorForUserEditorPermissions struct {
	User       TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission         `json:"user"`
	EmoteSet   TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission `json:"emoteSet"`
	Emote      TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission       `json:"emote"`
	SuperAdmin bool                                                                          `json:"superAdmin"`
}

// GetUser returns TwirSeventvUserEditorForUserEditorPermissions.User, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissions) GetUser() TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission {
	return v.User
}

// GetEmoteSet returns TwirSeventvUserEditorForUserEditorPermissions.EmoteSet, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissions) GetEmoteSet() TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission {
	return v.EmoteSet
}

// GetEmote returns TwirSeventvUserEditorForUserEditorPermissions.Emote, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissions) GetEmote() TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission {
	return v.Emote
}

// GetSuperAdmin returns TwirSeventvUserEditorForUserEditorPermissions.SuperAdmin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissions) GetSuperAdmin() bool { return v.SuperAdmin }

// TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission includes the requested fields of the GraphQL type EditorEmotePermission.
type TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission struct {
	Manage   bool `json:"manage"`
	Create   bool `json:"create"`
	Admin    bool `json:"admin"`
	Transfer bool `json:"transfer"`
}

// GetManage returns TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission.Manage, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission) GetManage() bool {
	return v.Manage
}

// GetCreate returns TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission.Create, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission) GetCreate() bool {
	return v.Create
}

// GetAdmin returns TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission.Admin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission) GetAdmin() bool {
	return v.Admin
}

// GetTransfer returns TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission.Transfer, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteEditorEmotePermission) GetTransfer() bool {
	return v.Transfer
}

// TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission includes the requested fields of the GraphQL type EditorEmoteSetPermission.
type TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission struct {
	Admin  bool `json:"admin"`
	Create bool `json:"create"`
	Manage bool `json:"manage"`
}

// GetAdmin returns TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission.Admin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission) GetAdmin() bool {
	return v.Admin
}

// GetCreate returns TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission.Create, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission) GetCreate() bool {
	return v.Create
}

// GetManage returns TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission.Manage, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsEmoteSetEditorEmoteSetPermission) GetManage() bool {
	return v.Manage
}

// TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission includes the requested fields of the GraphQL type EditorUserPermission.
type TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission struct {
	Admin                  bool `json:"admin"`
	ManageBilling          bool `json:"manageBilling"`
	ManageEditors          bool `json:"manageEditors"`
	ManagePersonalEmoteSet bool `json:"managePersonalEmoteSet"`
	ManageProfile          bool `json:"manageProfile"`
}

// GetAdmin returns TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission.Admin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission) GetAdmin() bool {
	return v.Admin
}

// GetManageBilling returns TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission.ManageBilling, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission) GetManageBilling() bool {
	return v.ManageBilling
}

// GetManageEditors returns TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission.ManageEditors, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission) GetManageEditors() bool {
	return v.ManageEditors
}

// GetManagePersonalEmoteSet returns TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission.ManagePersonalEmoteSet, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission) GetManagePersonalEmoteSet() bool {
	return v.ManagePersonalEmoteSet
}

// GetManageProfile returns TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission.ManageProfile, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorForUserEditorPermissionsUserEditorUserPermission) GetManageProfile() bool {
	return v.ManageProfile
}

// TwirSeventvUserEditorsUserEditor includes the requested fields of the GraphQL type UserEditor.
type TwirSeventvUserEditorsUserEditor struct {
	State       UserEditorState                             `json:"state"`
	AddedById   string                                      `json:"addedById"`
	UserId      string                                      `json:"userId"`
	EditorId    string                                      `json:"editorId"`
	AddedAt     time.Time                                   `json:"addedAt"`
	Permissions TwirSeventvUserEditorsUserEditorPermissions `json:"permissions"`
}

// GetState returns TwirSeventvUserEditorsUserEditor.State, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditor) GetState() UserEditorState { return v.State }

// GetAddedById returns TwirSeventvUserEditorsUserEditor.AddedById, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditor) GetAddedById() string { return v.AddedById }

// GetUserId returns TwirSeventvUserEditorsUserEditor.UserId, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditor) GetUserId() string { return v.UserId }

// GetEditorId returns TwirSeventvUserEditorsUserEditor.EditorId, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditor) GetEditorId() string { return v.EditorId }

// GetAddedAt returns TwirSeventvUserEditorsUserEditor.AddedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditor) GetAddedAt() time.Time { return v.AddedAt }

// GetPermissions returns TwirSeventvUserEditorsUserEditor.Permissions, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditor) GetPermissions() TwirSeventvUserEditorsUserEditorPermissions {
	return v.Permissions
}

// TwirSeventvUserEditorsUserEditorPermissions includes the requested fields of the GraphQL type UserEditorPermissions.
type TwirSeventvUserEditorsUserEditorPermissions struct {
	User       TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission         `json:"user"`
	EmoteSet   TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission `json:"emoteSet"`
	Emote      TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission       `json:"emote"`
	SuperAdmin bool                                                                        `json:"superAdmin"`
}

// GetUser returns TwirSeventvUserEditorsUserEditorPermissions.User, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissions) GetUser() TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission {
	return v.User
}

// GetEmoteSet returns TwirSeventvUserEditorsUserEditorPermissions.EmoteSet, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissions) GetEmoteSet() TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission {
	return v.EmoteSet
}

// GetEmote returns TwirSeventvUserEditorsUserEditorPermissions.Emote, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissions) GetEmote() TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission {
	return v.Emote
}

// GetSuperAdmin returns TwirSeventvUserEditorsUserEditorPermissions.SuperAdmin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissions) GetSuperAdmin() bool { return v.SuperAdmin }

// TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission includes the requested fields of the GraphQL type EditorEmotePermission.
type TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission struct {
	Manage   bool `json:"manage"`
	Create   bool `json:"create"`
	Admin    bool `json:"admin"`
	Transfer bool `json:"transfer"`
}

// GetManage returns TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission.Manage, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission) GetManage() bool {
	return v.Manage
}

// GetCreate returns TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission.Create, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission) GetCreate() bool {
	return v.Create
}

// GetAdmin returns TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission.Admin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission) GetAdmin() bool {
	return v.Admin
}

// GetTransfer returns TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission.Transfer, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteEditorEmotePermission) GetTransfer() bool {
	return v.Transfer
}

// TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission includes the requested fields of the GraphQL type EditorEmoteSetPermission.
type TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission struct {
	Admin  bool `json:"admin"`
	Create bool `json:"create"`
	Manage bool `json:"manage"`
}

// GetAdmin returns TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission.Admin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission) GetAdmin() bool {
	return v.Admin
}

// GetCreate returns TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission.Create, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission) GetCreate() bool {
	return v.Create
}

// GetManage returns TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission.Manage, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsEmoteSetEditorEmoteSetPermission) GetManage() bool {
	return v.Manage
}

// TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission includes the requested fields of the GraphQL type EditorUserPermission.
type TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission struct {
	Admin                  bool `json:"admin"`
	ManageBilling          bool `json:"manageBilling"`
	ManageEditors          bool `json:"manageEditors"`
	ManagePersonalEmoteSet bool `json:"managePersonalEmoteSet"`
	ManageProfile          bool `json:"manageProfile"`
}

// GetAdmin returns TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission.Admin, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission) GetAdmin() bool {
	return v.Admin
}

// GetManageBilling returns TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission.ManageBilling, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission) GetManageBilling() bool {
	return v.ManageBilling
}

// GetManageEditors returns TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission.ManageEditors, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission) GetManageEditors() bool {
	return v.ManageEditors
}

// GetManagePersonalEmoteSet returns TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission.ManagePersonalEmoteSet, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission) GetManagePersonalEmoteSet() bool {
	return v.ManagePersonalEmoteSet
}

// GetManageProfile returns TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission.ManageProfile, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEditorsUserEditorPermissionsUserEditorUserPermission) GetManageProfile() bool {
	return v.ManageProfile
}

// TwirSeventvUserEmoteSetsEmoteSet includes the requested fields of the GraphQL type EmoteSet.
type TwirSeventvUserEmoteSetsEmoteSet struct {
	Id     string                                                          `json:"id"`
	Name   string                                                          `json:"name"`
	Kind   EmoteSetKind                                                    `json:"kind"`
	Emotes TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResult `json:"emotes"`
}

// GetId returns TwirSeventvUserEmoteSetsEmoteSet.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSet) GetId() string { return v.Id }

// GetName returns TwirSeventvUserEmoteSetsEmoteSet.Name, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSet) GetName() string { return v.Name }

// GetKind returns TwirSeventvUserEmoteSetsEmoteSet.Kind, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSet) GetKind() EmoteSetKind { return v.Kind }

// GetEmotes returns TwirSeventvUserEmoteSetsEmoteSet.Emotes, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSet) GetEmotes() TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResult {
	return v.Emotes
}

// TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResult includes the requested fields of the GraphQL type EmoteSetEmoteSearchResult.
type TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResult struct {
	Items []TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote `json:"items"`
}

// GetItems returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResult.Items, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResult) GetItems() []TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote {
	return v.Items
}

// TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote includes the requested fields of the GraphQL type EmoteSetEmote.
type TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote struct {
	Id        string                                                                                 `json:"id"`
	Alias     string                                                                                 `json:"alias"`
	Emote     TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote `json:"emote"`
	AddedById *string                                                                                `json:"addedById"`
	AddedAt   time.Time                                                                              `json:"addedAt"`
}

// GetId returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetId() string {
	return v.Id
}

// GetAlias returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.Alias, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetAlias() string {
	return v.Alias
}

// GetEmote returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.Emote, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetEmote() TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote {
	return v.Emote
}

// GetAddedById returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.AddedById, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetAddedById() *string {
	return v.AddedById
}

// GetAddedAt returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.AddedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetAddedAt() time.Time {
	return v.AddedAt
}

// TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote includes the requested fields of the GraphQL type Emote.
type TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote struct {
	Id          string                                                                                           `json:"id"`
	DefaultName string                                                                                           `json:"defaultName"`
	Owner       *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser `json:"owner"`
}

// GetId returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote) GetId() string {
	return v.Id
}

// GetDefaultName returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote.DefaultName, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote) GetDefaultName() string {
	return v.DefaultName
}

// GetOwner returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote.Owner, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote) GetOwner() *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser {
	return v.Owner
}

// TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser includes the requested fields of the GraphQL type User.
type TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser struct {
	Id             string                                                                                                                       `json:"id"`
	MainConnection *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection `json:"mainConnection"`
}

// GetId returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser) GetId() string {
	return v.Id
}

// GetMainConnection returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser.MainConnection, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser) GetMainConnection() *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection {
	return v.MainConnection
}

// TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection includes the requested fields of the GraphQL type UserConnection.
type TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection struct {
	Platform            Platform `json:"platform"`
	PlatformUsername    string   `json:"platformUsername"`
	PlatformDisplayName string   `json:"platformDisplayName"`
}

// GetPlatform returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection.Platform, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection) GetPlatform() Platform {
	return v.Platform
}

// GetPlatformUsername returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection.PlatformUsername, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection) GetPlatformUsername() string {
	return v.PlatformUsername
}

// GetPlatformDisplayName returns TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection.PlatformDisplayName, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserEmoteSetsEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection) GetPlatformDisplayName() string {
	return v.PlatformDisplayName
}

// TwirSeventvUserInventory includes the requested fields of the GraphQL type UserInventory.
type TwirSeventvUserInventory struct {
	Badges []TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadge `json:"badges"`
	Paints []TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaint `json:"paints"`
}

// GetBadges returns TwirSeventvUserInventory.Badges, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventory) GetBadges() []TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadge {
	return v.Badges
}

// GetPaints returns TwirSeventvUserInventory.Paints, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventory) GetPaints() []TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaint {
	return v.Paints
}

// TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadge includes the requested fields of the GraphQL type EntitlementEdgeAnyBadge.
type TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadge struct {
	To TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadge `json:"to"`
}

// GetTo returns TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadge.To, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadge) GetTo() TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadge {
	return v.To
}

// TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadge includes the requested fields of the GraphQL type EntitlementNodeBadge.
type TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadge struct {
	Badge *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge `json:"badge"`
}

// GetBadge returns TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadge.Badge, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadge) GetBadge() *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge {
	return v.Badge
}

// TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge includes the requested fields of the GraphQL type Badge.
type TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge struct {
	UpdatedAt       time.Time  `json:"updatedAt"`
	Name            string     `json:"name"`
	SearchUpdatedAt *time.Time `json:"searchUpdatedAt"`
}

// GetUpdatedAt returns TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetName returns TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge.Name, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge) GetName() string {
	return v.Name
}

// GetSearchUpdatedAt returns TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge.SearchUpdatedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryBadgesEntitlementEdgeAnyBadgeToEntitlementNodeBadgeBadge) GetSearchUpdatedAt() *time.Time {
	return v.SearchUpdatedAt
}

// TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaint includes the requested fields of the GraphQL type EntitlementEdgeAnyPaint.
type TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaint struct {
	To TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaint `json:"to"`
}

// GetTo returns TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaint.To, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaint) GetTo() TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaint {
	return v.To
}

// TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaint includes the requested fields of the GraphQL type EntitlementNodePaint.
type TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaint struct {
	Paint *TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaintPaint `json:"paint"`
}

// GetPaint returns TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaint.Paint, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaint) GetPaint() *TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaintPaint {
	return v.Paint
}

// TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaintPaint includes the requested fields of the GraphQL type Paint.
type TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaintPaint struct {
	Id string `json:"id"`
}

// GetId returns TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaintPaint.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserInventoryPaintsEntitlementEdgeAnyPaintToEntitlementNodePaintPaint) GetId() string {
	return v.Id
}

// TwirSeventvUserMainConnectionUserConnection includes the requested fields of the GraphQL type UserConnection.
type TwirSeventvUserMainConnectionUserConnection struct {
	Platform            Platform  `json:"platform"`
	PlatformDisplayName string    `json:"platformDisplayName"`
	PlatformUsername    string    `json:"platformUsername"`
	LinkedAt            time.Time `json:"linkedAt"`
	PlatformAvatarUrl   *string   `json:"platformAvatarUrl"`
}

// GetPlatform returns TwirSeventvUserMainConnectionUserConnection.Platform, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserMainConnectionUserConnection) GetPlatform() Platform { return v.Platform }

// GetPlatformDisplayName returns TwirSeventvUserMainConnectionUserConnection.PlatformDisplayName, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserMainConnectionUserConnection) GetPlatformDisplayName() string {
	return v.PlatformDisplayName
}

// GetPlatformUsername returns TwirSeventvUserMainConnectionUserConnection.PlatformUsername, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserMainConnectionUserConnection) GetPlatformUsername() string {
	return v.PlatformUsername
}

// GetLinkedAt returns TwirSeventvUserMainConnectionUserConnection.LinkedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserMainConnectionUserConnection) GetLinkedAt() time.Time { return v.LinkedAt }

// GetPlatformAvatarUrl returns TwirSeventvUserMainConnectionUserConnection.PlatformAvatarUrl, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserMainConnectionUserConnection) GetPlatformAvatarUrl() *string {
	return v.PlatformAvatarUrl
}

// TwirSeventvUserRolesRole includes the requested fields of the GraphQL type Role.
type TwirSeventvUserRolesRole struct {
	Name string `json:"name"`
}

// GetName returns TwirSeventvUserRolesRole.Name, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserRolesRole) GetName() string { return v.Name }

// TwirSeventvUserStyle includes the requested fields of the GraphQL type UserStyle.
type TwirSeventvUserStyle struct {
	ActivePaint      *TwirSeventvUserStyleActivePaint    `json:"activePaint"`
	ActiveEmoteSet   *TwirSeventvUserStyleActiveEmoteSet `json:"activeEmoteSet"`
	ActiveEmoteSetId *string                             `json:"activeEmoteSetId"`
}

// GetActivePaint returns TwirSeventvUserStyle.ActivePaint, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyle) GetActivePaint() *TwirSeventvUserStyleActivePaint {
	return v.ActivePaint
}

// GetActiveEmoteSet returns TwirSeventvUserStyle.ActiveEmoteSet, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyle) GetActiveEmoteSet() *TwirSeventvUserStyleActiveEmoteSet {
	return v.ActiveEmoteSet
}

// GetActiveEmoteSetId returns TwirSeventvUserStyle.ActiveEmoteSetId, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyle) GetActiveEmoteSetId() *string { return v.ActiveEmoteSetId }

// TwirSeventvUserStyleActiveEmoteSet includes the requested fields of the GraphQL type EmoteSet.
type TwirSeventvUserStyleActiveEmoteSet struct {
	Id       string                                                            `json:"id"`
	Name     string                                                            `json:"name"`
	Kind     EmoteSetKind                                                      `json:"kind"`
	Emotes   TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResult `json:"emotes"`
	Capacity *int                                                              `json:"capacity"`
}

// GetId returns TwirSeventvUserStyleActiveEmoteSet.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSet) GetId() string { return v.Id }

// GetName returns TwirSeventvUserStyleActiveEmoteSet.Name, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSet) GetName() string { return v.Name }

// GetKind returns TwirSeventvUserStyleActiveEmoteSet.Kind, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSet) GetKind() EmoteSetKind { return v.Kind }

// GetEmotes returns TwirSeventvUserStyleActiveEmoteSet.Emotes, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSet) GetEmotes() TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResult {
	return v.Emotes
}

// GetCapacity returns TwirSeventvUserStyleActiveEmoteSet.Capacity, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSet) GetCapacity() *int { return v.Capacity }

// TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResult includes the requested fields of the GraphQL type EmoteSetEmoteSearchResult.
type TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResult struct {
	Items []TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote `json:"items"`
}

// GetItems returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResult.Items, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResult) GetItems() []TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote {
	return v.Items
}

// TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote includes the requested fields of the GraphQL type EmoteSetEmote.
type TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote struct {
	Id        string                                                                                   `json:"id"`
	Alias     string                                                                                   `json:"alias"`
	Emote     TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote `json:"emote"`
	AddedById *string                                                                                  `json:"addedById"`
	AddedAt   time.Time                                                                                `json:"addedAt"`
}

// GetId returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetId() string {
	return v.Id
}

// GetAlias returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.Alias, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetAlias() string {
	return v.Alias
}

// GetEmote returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.Emote, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetEmote() TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote {
	return v.Emote
}

// GetAddedById returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.AddedById, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetAddedById() *string {
	return v.AddedById
}

// GetAddedAt returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote.AddedAt, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmote) GetAddedAt() time.Time {
	return v.AddedAt
}

// TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote includes the requested fields of the GraphQL type Emote.
type TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote struct {
	Id          string                                                                                             `json:"id"`
	DefaultName string                                                                                             `json:"defaultName"`
	Owner       *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser `json:"owner"`
}

// GetId returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote) GetId() string {
	return v.Id
}

// GetDefaultName returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote.DefaultName, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote) GetDefaultName() string {
	return v.DefaultName
}

// GetOwner returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote.Owner, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmote) GetOwner() *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser {
	return v.Owner
}

// TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser includes the requested fields of the GraphQL type User.
type TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser struct {
	Id             string                                                                                                                         `json:"id"`
	MainConnection *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection `json:"mainConnection"`
}

// GetId returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser) GetId() string {
	return v.Id
}

// GetMainConnection returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser.MainConnection, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUser) GetMainConnection() *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection {
	return v.MainConnection
}

// TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection includes the requested fields of the GraphQL type UserConnection.
type TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection struct {
	Platform            Platform `json:"platform"`
	PlatformUsername    string   `json:"platformUsername"`
	PlatformDisplayName string   `json:"platformDisplayName"`
}

// GetPlatform returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection.Platform, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection) GetPlatform() Platform {
	return v.Platform
}

// GetPlatformUsername returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection.PlatformUsername, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection) GetPlatformUsername() string {
	return v.PlatformUsername
}

// GetPlatformDisplayName returns TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection.PlatformDisplayName, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActiveEmoteSetEmotesEmoteSetEmoteSearchResultItemsEmoteSetEmoteEmoteOwnerUserMainConnectionUserConnection) GetPlatformDisplayName() string {
	return v.PlatformDisplayName
}

// TwirSeventvUserStyleActivePaint includes the requested fields of the GraphQL type Paint.
type TwirSeventvUserStyleActivePaint struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns TwirSeventvUserStyleActivePaint.Id, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActivePaint) GetId() string { return v.Id }

// GetName returns TwirSeventvUserStyleActivePaint.Name, and is useful for accessing the field via an interface.
func (v *TwirSeventvUserStyleActivePaint) GetName() string { return v.Name }

type UserEditorState string

const (
	UserEditorStatePending  UserEditorState = "PENDING"
	UserEditorStateAccepted UserEditorState = "ACCEPTED"
	UserEditorStateRejected UserEditorState = "REJECTED"
)

var AllUserEditorState = []UserEditorState{
	UserEditorStatePending,
	UserEditorStateAccepted,
	UserEditorStateRejected,
}

// __AddEmoteToSetInput is used internally by genqlient
type __AddEmoteToSetInput struct {
	EmoteSetId string          `json:"emoteSetId"`
	EmoteId    EmoteSetEmoteId `json:"emoteId"`
}

// GetEmoteSetId returns __AddEmoteToSetInput.EmoteSetId, and is useful for accessing the field via an interface.
func (v *__AddEmoteToSetInput) GetEmoteSetId() string { return v.EmoteSetId }

// GetEmoteId returns __AddEmoteToSetInput.EmoteId, and is useful for accessing the field via an interface.
func (v *__AddEmoteToSetInput) GetEmoteId() EmoteSetEmoteId { return v.EmoteId }

// __DeleteEmoteFromSetInput is used internally by genqlient
type __DeleteEmoteFromSetInput struct {
	EmotesetId string          `json:"emotesetId"`
	EmoteId    EmoteSetEmoteId `json:"emoteId"`
}

// GetEmotesetId returns __DeleteEmoteFromSetInput.EmotesetId, and is useful for accessing the field via an interface.
func (v *__DeleteEmoteFromSetInput) GetEmotesetId() string { return v.EmotesetId }

// GetEmoteId returns __DeleteEmoteFromSetInput.EmoteId, and is useful for accessing the field via an interface.
func (v *__DeleteEmoteFromSetInput) GetEmoteId() EmoteSetEmoteId { return v.EmoteId }

// __GetOneEmoteByIdInput is used internally by genqlient
type __GetOneEmoteByIdInput struct {
	Id string `json:"id"`
}

// GetId returns __GetOneEmoteByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__GetOneEmoteByIdInput) GetId() string { return v.Id }

// __GetProfileByIdInput is used internally by genqlient
type __GetProfileByIdInput struct {
	Id string `json:"id"`
}

// GetId returns __GetProfileByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__GetProfileByIdInput) GetId() string { return v.Id }

// __GetProfileByTwitchIdInput is used internally by genqlient
type __GetProfileByTwitchIdInput struct {
	Id string `json:"id"`
}

// GetId returns __GetProfileByTwitchIdInput.Id, and is useful for accessing the field via an interface.
func (v *__GetProfileByTwitchIdInput) GetId() string { return v.Id }

// __RenameEmoteInput is used internally by genqlient
type __RenameEmoteInput struct {
	EmoteSetId string          `json:"emoteSetId"`
	EmoteId    EmoteSetEmoteId `json:"emoteId"`
	Alias      string          `json:"alias"`
}

// GetEmoteSetId returns __RenameEmoteInput.EmoteSetId, and is useful for accessing the field via an interface.
func (v *__RenameEmoteInput) GetEmoteSetId() string { return v.EmoteSetId }

// GetEmoteId returns __RenameEmoteInput.EmoteId, and is useful for accessing the field via an interface.
func (v *__RenameEmoteInput) GetEmoteId() EmoteSetEmoteId { return v.EmoteId }

// GetAlias returns __RenameEmoteInput.Alias, and is useful for accessing the field via an interface.
func (v *__RenameEmoteInput) GetAlias() string { return v.Alias }

// __SearchEmoteByNameInput is used internally by genqlient
type __SearchEmoteByNameInput struct {
	Query string `json:"query"`
}

// GetQuery returns __SearchEmoteByNameInput.Query, and is useful for accessing the field via an interface.
func (v *__SearchEmoteByNameInput) GetQuery() string { return v.Query }

// The mutation executed by AddEmoteToSet.
const AddEmoteToSet_Operation = `
mutation AddEmoteToSet ($emoteSetId: Id!, $emoteId: EmoteSetEmoteId!) {
	emoteSets {
		emoteSet(id: $emoteSetId) {
			addEmote(id: $emoteId) {
				id
				name
			}
		}
	}
}
`

func AddEmoteToSet(
	ctx_ context.Context,
	client_ graphql.Client,
	emoteSetId string,
	emoteId EmoteSetEmoteId,
) (data_ *AddEmoteToSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AddEmoteToSet",
		Query:  AddEmoteToSet_Operation,
		Variables: &__AddEmoteToSetInput{
			EmoteSetId: emoteSetId,
			EmoteId:    emoteId,
		},
	}

	data_ = &AddEmoteToSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteEmoteFromSet.
const DeleteEmoteFromSet_Operation = `
mutation DeleteEmoteFromSet ($emotesetId: Id!, $emoteId: EmoteSetEmoteId!) {
	emoteSets {
		emoteSet(id: $emotesetId) {
			removeEmote(id: $emoteId) {
				id
				name
			}
		}
	}
}
`

func DeleteEmoteFromSet(
	ctx_ context.Context,
	client_ graphql.Client,
	emotesetId string,
	emoteId EmoteSetEmoteId,
) (data_ *DeleteEmoteFromSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteEmoteFromSet",
		Query:  DeleteEmoteFromSet_Operation,
		Variables: &__DeleteEmoteFromSetInput{
			EmotesetId: emotesetId,
			EmoteId:    emoteId,
		},
	}

	data_ = &DeleteEmoteFromSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetOneEmoteById.
const GetOneEmoteById_Operation = `
query GetOneEmoteById ($id: Id!) {
	emotes {
		emote(id: $id) {
			... TwirSeventvEmote
		}
	}
}
fragment TwirSeventvEmote on Emote {
	id
	defaultName
	images {
		size
		width
		height
		mime
		url
	}
	ownerId
	owner {
		... TwirSeventvUser
	}
}
fragment TwirSeventvUser on User {
	id
	mainConnection {
		platform
		platformDisplayName
		platformUsername
		linkedAt
		platformAvatarUrl
	}
	updatedAt
	editors {
		state
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	editorFor {
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	emoteSets {
		id
		name
		kind
		emotes {
			items {
				id
				alias
				emote {
					id
					defaultName
					owner {
						id
						mainConnection {
							platform
							platformUsername
							platformDisplayName
						}
					}
				}
				addedById
				addedAt
			}
		}
	}
	roles {
		name
	}
	style {
		activePaint {
			id
			name
		}
		activeEmoteSet {
			id
			name
			kind
			emotes {
				items {
					id
					alias
					emote {
						id
						defaultName
						owner {
							id
							mainConnection {
								platform
								platformUsername
								platformDisplayName
							}
						}
					}
					addedById
					addedAt
				}
			}
			capacity
		}
		activeEmoteSetId
	}
	inventory {
		badges {
			to {
				badge {
					updatedAt
					name
					searchUpdatedAt
				}
			}
		}
		paints {
			to {
				paint {
					id
				}
			}
		}
	}
}
`

func GetOneEmoteById(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetOneEmoteByIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetOneEmoteById",
		Query:  GetOneEmoteById_Operation,
		Variables: &__GetOneEmoteByIdInput{
			Id: id,
		},
	}

	data_ = &GetOneEmoteByIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetProfileById.
const GetProfileById_Operation = `
query GetProfileById ($id: Id!) {
	users {
		user(id: $id) {
			... TwirSeventvUser
		}
	}
}
fragment TwirSeventvUser on User {
	id
	mainConnection {
		platform
		platformDisplayName
		platformUsername
		linkedAt
		platformAvatarUrl
	}
	updatedAt
	editors {
		state
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	editorFor {
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	emoteSets {
		id
		name
		kind
		emotes {
			items {
				id
				alias
				emote {
					id
					defaultName
					owner {
						id
						mainConnection {
							platform
							platformUsername
							platformDisplayName
						}
					}
				}
				addedById
				addedAt
			}
		}
	}
	roles {
		name
	}
	style {
		activePaint {
			id
			name
		}
		activeEmoteSet {
			id
			name
			kind
			emotes {
				items {
					id
					alias
					emote {
						id
						defaultName
						owner {
							id
							mainConnection {
								platform
								platformUsername
								platformDisplayName
							}
						}
					}
					addedById
					addedAt
				}
			}
			capacity
		}
		activeEmoteSetId
	}
	inventory {
		badges {
			to {
				badge {
					updatedAt
					name
					searchUpdatedAt
				}
			}
		}
		paints {
			to {
				paint {
					id
				}
			}
		}
	}
}
`

func GetProfileById(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetProfileByIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetProfileById",
		Query:  GetProfileById_Operation,
		Variables: &__GetProfileByIdInput{
			Id: id,
		},
	}

	data_ = &GetProfileByIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetProfileByTwitchId.
const GetProfileByTwitchId_Operation = `
query GetProfileByTwitchId ($id: String!) {
	users {
		userByConnection(platform: TWITCH, platformId: $id) {
			... TwirSeventvUser
		}
	}
}
fragment TwirSeventvUser on User {
	id
	mainConnection {
		platform
		platformDisplayName
		platformUsername
		linkedAt
		platformAvatarUrl
	}
	updatedAt
	editors {
		state
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	editorFor {
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	emoteSets {
		id
		name
		kind
		emotes {
			items {
				id
				alias
				emote {
					id
					defaultName
					owner {
						id
						mainConnection {
							platform
							platformUsername
							platformDisplayName
						}
					}
				}
				addedById
				addedAt
			}
		}
	}
	roles {
		name
	}
	style {
		activePaint {
			id
			name
		}
		activeEmoteSet {
			id
			name
			kind
			emotes {
				items {
					id
					alias
					emote {
						id
						defaultName
						owner {
							id
							mainConnection {
								platform
								platformUsername
								platformDisplayName
							}
						}
					}
					addedById
					addedAt
				}
			}
			capacity
		}
		activeEmoteSetId
	}
	inventory {
		badges {
			to {
				badge {
					updatedAt
					name
					searchUpdatedAt
				}
			}
		}
		paints {
			to {
				paint {
					id
				}
			}
		}
	}
}
`

func GetProfileByTwitchId(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetProfileByTwitchIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetProfileByTwitchId",
		Query:  GetProfileByTwitchId_Operation,
		Variables: &__GetProfileByTwitchIdInput{
			Id: id,
		},
	}

	data_ = &GetProfileByTwitchIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by RenameEmote.
const RenameEmote_Operation = `
mutation RenameEmote ($emoteSetId: Id!, $emoteId: EmoteSetEmoteId!, $alias: String!) {
	emoteSets {
		emoteSet(id: $emoteSetId) {
			updateEmoteAlias(id: $emoteId, alias: $alias) {
				id
			}
		}
	}
}
`

func RenameEmote(
	ctx_ context.Context,
	client_ graphql.Client,
	emoteSetId string,
	emoteId EmoteSetEmoteId,
	alias string,
) (data_ *RenameEmoteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RenameEmote",
		Query:  RenameEmote_Operation,
		Variables: &__RenameEmoteInput{
			EmoteSetId: emoteSetId,
			EmoteId:    emoteId,
			Alias:      alias,
		},
	}

	data_ = &RenameEmoteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by SearchEmoteByName.
const SearchEmoteByName_Operation = `
query SearchEmoteByName ($query: String!) {
	emotes {
		search(query: $query, sort: {order:DESCENDING,sortBy:TOP_ALL_TIME}) {
			items {
				... TwirSeventvEmote
			}
		}
	}
}
fragment TwirSeventvEmote on Emote {
	id
	defaultName
	images {
		size
		width
		height
		mime
		url
	}
	ownerId
	owner {
		... TwirSeventvUser
	}
}
fragment TwirSeventvUser on User {
	id
	mainConnection {
		platform
		platformDisplayName
		platformUsername
		linkedAt
		platformAvatarUrl
	}
	updatedAt
	editors {
		state
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	editorFor {
		addedById
		userId
		editorId
		addedAt
		permissions {
			user {
				admin
				manageBilling
				manageEditors
				managePersonalEmoteSet
				manageProfile
			}
			emoteSet {
				admin
				create
				manage
			}
			emote {
				manage
				create
				admin
				transfer
			}
			superAdmin
		}
	}
	emoteSets {
		id
		name
		kind
		emotes {
			items {
				id
				alias
				emote {
					id
					defaultName
					owner {
						id
						mainConnection {
							platform
							platformUsername
							platformDisplayName
						}
					}
				}
				addedById
				addedAt
			}
		}
	}
	roles {
		name
	}
	style {
		activePaint {
			id
			name
		}
		activeEmoteSet {
			id
			name
			kind
			emotes {
				items {
					id
					alias
					emote {
						id
						defaultName
						owner {
							id
							mainConnection {
								platform
								platformUsername
								platformDisplayName
							}
						}
					}
					addedById
					addedAt
				}
			}
			capacity
		}
		activeEmoteSetId
	}
	inventory {
		badges {
			to {
				badge {
					updatedAt
					name
					searchUpdatedAt
				}
			}
		}
		paints {
			to {
				paint {
					id
				}
			}
		}
	}
}
`

func SearchEmoteByName(
	ctx_ context.Context,
	client_ graphql.Client,
	query string,
) (data_ *SearchEmoteByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SearchEmoteByName",
		Query:  SearchEmoteByName_Operation,
		Variables: &__SearchEmoteByNameInput{
			Query: query,
		},
	}

	data_ = &SearchEmoteByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
