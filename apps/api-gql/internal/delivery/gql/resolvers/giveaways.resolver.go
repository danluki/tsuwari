package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	ulid "github.com/oklog/ulid/v2"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/services/giveaways"
)

// GiveawaysCreate is the resolver for the giveawaysCreate field.
func (r *mutationResolver) GiveawaysCreate(ctx context.Context, opts gqlmodel.GiveawaysCreateInput) (*gqlmodel.ChannelGiveaway, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return nil, err
	}

	_, err = r.deps.GiveawaysService.Create(ctx, giveaways.CreateInput{
		ChannelID:       dashboardId,
		Keyword:         opts.Keyword,
		CreatedByUserID: user.ID,
	})
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// GiveawaysUpdate is the resolver for the giveawaysUpdate field.
func (r *mutationResolver) GiveawaysUpdate(ctx context.Context, id string, opts gqlmodel.GiveawaysUpdateInput) (*gqlmodel.ChannelGiveaway, error) {
	panic(fmt.Errorf("not implemented: GiveawaysUpdate - giveawaysUpdate"))
}

// GiveawaysRemove is the resolver for the giveawaysRemove field.
func (r *mutationResolver) GiveawaysRemove(ctx context.Context, id string) (*gqlmodel.ChannelGiveaway, error) {
	panic(fmt.Errorf("not implemented: GiveawaysRemove - giveawaysRemove"))
}

// Giveaways is the resolver for the giveaways field.
func (r *queryResolver) Giveaways(ctx context.Context) ([]gqlmodel.ChannelGiveaway, error) {
	panic(fmt.Errorf("not implemented: Giveaways - giveaways"))
}

// Giveaway is the resolver for the giveaway field.
func (r *queryResolver) Giveaway(ctx context.Context, giveawayID string) (*gqlmodel.ChannelGiveaway, error) {
	// giveaway, err := r.deps.GiveawaysService.
	return nil, nil
}

// GiveawayParticipants is the resolver for the giveawayParticipants field.
func (r *queryResolver) GiveawayParticipants(ctx context.Context, giveawayID string) ([]gqlmodel.ChannelGiveawayParticipants, error) {
	parsedID, err := ulid.Parse(giveawayID)
	if err != nil {
		return nil, err
	}

	r.deps.GiveawaysService.GetParticipantsForGiveaway(ctx, parsedID)
	return nil, nil
}
