package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"errors"
	"fmt"

	req "github.com/imroc/req/v3"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
)

// ModerationLanguagesAvailableLanguages is the resolver for the moderationLanguagesAvailableLanguages field.
func (r *queryResolver) ModerationLanguagesAvailableLanguages(ctx context.Context) (*gqlmodel.ModerationLanguagesAvailableLanguagesOutput, error) {
	type availableLanguage struct {
		ISO6391    string `json:"iso_639_1"`
		Name       string `json:"name"`
		NativeName string `json:"native_name"`
	}

	var reqUrl string
	if r.deps.Config.AppEnv == "production" {
		reqUrl = fmt.Sprint("http://language-detector:3012")
	} else {
		reqUrl = "http://localhost:3012"
	}

	var resp []availableLanguage
	res, err := req.R().SetSuccessResult(&resp).Get(reqUrl + "/languages")
	if err != nil {
		return nil, err
	}
	if !res.IsSuccessState() {
		return nil, errors.New("cannot get response")
	}

	gqlResp := &gqlmodel.ModerationLanguagesAvailableLanguagesOutput{
		Languages: make([]gqlmodel.ModerationLanguagesAvailableLanguage, 0, len(resp)),
	}

	for _, lang := range resp {
		gqlResp.Languages = append(
			gqlResp.Languages,
			gqlmodel.ModerationLanguagesAvailableLanguage{
				Iso639_1:   lang.ISO6391,
				Name:       lang.Name,
				NativeName: lang.NativeName,
			},
		)
	}

	return gqlResp, nil
}
